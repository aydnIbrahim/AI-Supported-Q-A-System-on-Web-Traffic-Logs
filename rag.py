"""
rag.py

This module integrates the FAISS indexing system with OpenAI's language model
to create a Retrieval-Augmented Generation (RAG) system. It uses Gradio to
build a web interface for querying the system.
"""

from openai import OpenAI
import gradio as gr

from faiss_vectorizer import FaissIndex


def generate(prompt: str) -> str:
    """
    Generates a response from the OpenAI API based on the given prompt.

    Args:
        prompt (str): The text prompt to send to the OpenAI model.

    Returns:
        str: The response generated by the OpenAI model.
    """
    client = OpenAI(api_key="")  # Add your API key here
    chat_completion = client.chat.completions.create(
        messages=[{"role": "user", "content": prompt}],
        model="gpt-4o-mini",
    )
    return chat_completion.choices[0].message.content


class RAG:
    """
    A class for implementing a Retrieval-Augmented Generation (RAG) system
    using FAISS for indexing and OpenAI for response generation.

    Attributes:
        faiss_index (FaissIndex): An instance of the FaissIndex class.
    """

    def __init__(self, faiss_index: FaissIndex):
        """
        Initializes the RAG system with the given FAISS index.

        Args:
            faiss_index (FaissIndex): An instance of the FaissIndex class.
        """
        self.faiss_index = faiss_index

    def retrieve(self, query: str, field: str, k: int = 5) -> list:
        """
        Retrieves indices from the FAISS index based on the query.

        Args:
            query (str): The query string to search.
            field (str): The field to search within.
            k (int): The number of nearest neighbors to return (default is 5).

        Returns:
            list: A list of indices of the nearest neighbors.
        """
        return self.faiss_index.search(query, field, k)

    def rag_response(self, query: str, field: str, k: int = 5) -> str:
        """
        Generates a response based on the query using the RAG system.

        Args:
            query (str): The query string to process.
            field (str): The field to search within.
            k (int): The number of nearest neighbors to consider (default is 5).

        Returns:
            str: The response generated by the OpenAI model.
        """
        indices = self.retrieve(query, field, k)
        documents = [self.faiss_index.df.iloc[idx] for idx in indices[0]]
        prompt = (f"Based on the following documents, answer the query: {query}"
                  f"\nDocuments: {documents}")
        return generate(prompt)


index = FaissIndex()
index.build_index()

rag = RAG(index)


def query_rag(query: str, field: str, k: int) -> str:
    """
    Processes the user query and returns a response from the RAG system.

    Args:
        query (str): The query input from the user.
        field (str): The field to search within.
        k (int): The number of results to return.

    Returns:
        str: The response from the RAG system.
    """
    return rag.rag_response(query, field, k)


with gr.Blocks() as rag_demo:
    gr.Markdown("# RAG Based Question Answering System")

    user_query = gr.Textbox(label="Enter your query",
                            placeholder="e.g. What is the date of the first login?")
    search_field = gr.Radio(choices=["url", "timestamp", "status", "user_agent", "ip_address"],
                            label="Field to search", value="timestamp")
    num_results = gr.Slider(minimum=1, maximum=1000, value=5, label="Number of Results (k)")

    output = gr.Textbox(label="RAG System Response")

    submit_button = gr.Button("Get Answer")

    submit_button.click(fn=query_rag, inputs=[user_query, search_field, num_results],
                        outputs=output)

rag_demo.launch()
